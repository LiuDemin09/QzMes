using System;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Freeworks.Common;
using Freeworks.Common.Cryptography;
using Freeworks.ORM.Core;
using System.IO;
using DAL;
using System.Collections;

namespace BLL
{
    public class SystemBO : BOBase
    {
        string tplPath = "";
        public SystemBO(UserInfo userInfo)
           : base(userInfo)
        {
            //
            // TODO: Add constructor logic here
            //
            //打印模版存放路徑
            tplPath = ConstantsHelper.GetHelper(this.UserSite, this.UserBU).S_LABEL_TPL_PATH + "\\" + this.UserSite + this.UserBU;
            if (!Directory.Exists(tplPath))
            {
                Directory.CreateDirectory(tplPath);
            }
        }
        /// <summary>
        /// 加密
        /// </summary>
        /// <param name="original"></param>
        /// <returns></returns>
        public String Encrypt(String original)
        {
            return CryptographyManager.Instance.SymmetricEncrpyt(original, CryptographyManager.DEFAULT_KEY);
        }
        /// <summary>
        /// 解密
        /// </summary>
        /// <param name="dist"></param>
        /// <returns></returns>
        public String Decrypt(String dist)
        {
            return CryptographyManager.Instance.SymmetricDecrpyt(dist, CryptographyManager.DEFAULT_KEY);
        }

        public IList<SysUser> FindUsers(string userCode, string userName)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(userCode))
            {
                ce = (SysUser.Meta.UserCode == userCode);
            }

            if (!string.IsNullOrEmpty(userName))
            {
                ce =( ce & SysUser.Meta.UserName.Like(userName));
            }

            //if (!string.IsNullOrEmpty(deptCode))
            //{
            //    ce = ce & (SysUser.Meta.DeptCode.Like(deptCode));
            //}

            // ce = ce & SysUser.Meta.SITE == this.UserSite;

            if (ce == null)
            {
                return DBContext.LoadArray<SysUser>();
            }

            return DBContext.FindArray<SysUser>(ce);

        }

        public IList<SysUser> FindPublicUsers(string userCode, string userName)
        {
            string sql = @"select user_code,user_name,dept_name,phone mobile from basedata.sys_user where user_code not in(
                                select user_code from mes_master.sys_user) ";
            if (!string.IsNullOrEmpty(userCode))
            {
                sql += "and user_code='" + userCode + "'";
            }
            if (!string.IsNullOrEmpty(userName))
            {
                sql += "and user_name='" + userName + "'";
            }
            sql += " order by user_code";
            //string sql = "SELECT * FROM MES_MASTER.SYS_USER WHERE USER_CODE IN (SELECT USER_CODE FROM MES_MASTER.SYS_ROLE_USER WHERE ROLE_ID = '{0}')";
            //sql = string.Format(sql, roleId);
            return DBContext.ExcuteSql(sql).ToBusiObjects<SysUser>();

        }

        public SysUser FindUserByCode(string userCode)
        {
            return DBContext.Find<SysUser>(SysUser.Meta.UserCode == userCode);
        }
        public IList<SysUser> FindPublicUserByCode(string userCode)
        {
            string sql = @"select user_code,user_name,dept_name,phone mobile from basedata.sys_user where user_code not in(
                                select user_code from mes_master.sys_user) ";
            if (!string.IsNullOrEmpty(userCode))
            {
                sql += "and user_code='" + userCode + "'";
            }


            //string sql = "SELECT * FROM MES_MASTER.SYS_USER WHERE USER_CODE IN (SELECT USER_CODE FROM MES_MASTER.SYS_ROLE_USER WHERE ROLE_ID = '{0}')";
            //sql = string.Format(sql, roleId);
            return DBContext.ExcuteSql(sql).ToBusiObjects<SysUser>();

        }
        public void SaveUser(SysUser user)
        {
            user.UserCode = user.UserCode.ToUpper();
            if (!DBContext.Exist<SysUser>(SysUser.Meta.UserCode == user.UserCode))
            {
                user.CreatedDate = DateTime.Now;
                user.PWD = CryptographyManager.Instance.SymmetricEncrpyt(BLLConstants.DEAULT_PWD, CryptographyManager.DEFAULT_KEY);
            }
            user.UpdatedBy = this.UserCode;
            user.UpdatedDate = DateTime.Now;
            //user.BU = this.UserBU;
            //user.SITE = this.UserSite;

            DBContext.SaveAndUpdate<SysUser>(user);
        }

        public void RemoveUser(string userCode)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<SysRoleUser>(trans, SysRoleUser.Meta.UserCode == userCode);
                DBContext.Remove<SysUser>(trans, userCode);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveUser");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }


        public void UpdateRoleUsers(string roleId, string[] userCodes)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                foreach (string userCode in userCodes)
                {

                    SysRoleUser ru = DBContext.Find<SysRoleUser>(trans, SysRoleUser.Meta.RoleId == roleId & SysRoleUser.Meta.UserCode == userCode);
                    if (ru == null)
                    {
                        ru = new SysRoleUser();
                        ru.ID = PubHelper.GetHelper(DBContext).GetNextID().ToString();
                    }
                    ru.RoleId = roleId;
                    ru.UserCode = userCode;

                    ru.UpdatedBy = this.UserCode;
                    ru.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<SysRoleUser>(trans, ru);
                }

                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateUserRole");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }

        public void UpdateUserRole(string[] items, string userCode)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                //篩選出Site，Bu下的ROLE_ID
                //SysRole ssql = DBContext.Find<SysRole>(trans, SysRole.Meta.SITE == this.UserSite & SysRole.Meta.BU == this.UserBU);

                //string ssql = @"SELECT ID FROM FMGR.SYS_ROLE  WHERE SITE = '{0}' AND BU = '{1}'";
                //ssql = string.Format(ssql, this.UserSite, this.UserBU);
                //DBContext.ExcuteSql(trans, ssql);
                //刪除
                string dsql = @"DELETE  FROM MES_MASTER.SYS_ROLE_USER WHERE ROLE_ID IN (SELECT ID FROM MES_MASTER.SYS_ROLE   ) AND USER_CODE = '{0}'";
                dsql = string.Format(dsql, userCode);
                DBContext.ExcuteSql(trans, dsql).ToNonQuery(); ;
                // DBContext.Remove<SysRoleUser>(trans, SysRoleUser.Meta.UserCode == userCode & SysRoleUser.Meta.RoleId == ssql.ID);
                if (items != null && items.Length > 0)
                {
                    foreach (string item in items)
                    {
                        SysRoleUser ru = new SysRoleUser();
                        ru.RoleId = item;
                        ru.UserCode = userCode;
                        ru.ID = PubHelper.GetHelper(DBContext).GetNextID().ToString();
                        ru.UpdatedBy = this.UserCode;
                        ru.UpdatedDate = DateTime.Now;
                        DBContext.SaveAndUpdate<SysRoleUser>(trans, ru);
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateUserRole");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }

        public IList<SysRole> ListRole()
        {
            return DBContext.FindArray<SysRole>(SysRole.Meta.STATUS == 1);
        }

        public IList<SysRole> ListActivedRole()
        {
            return DBContext.FindArray<SysRole>(SysRole.Meta.STATUS == 1);
        }

        public void SaveRole(SysRole role)
        {
            if (string.IsNullOrEmpty(role.ID))
            {
                role.ID = PubHelper.GetHelper(DBContext).GetNextID().ToString();
                role.CreatedDate = DateTime.Now;
            }
            role.UpdatedBy = this.UserCode;
            role.UpdatedDate = DateTime.Now;
            DBContext.SaveAndUpdate<SysRole>(role);
        }

        public void RemoveRole(string id)
        {
            if (DBContext.Exist<SysRoleUser>(SysRoleUser.Meta.RoleId == id))
            {
                throw new BusiException("不能删除角色，因为存在角色下的用户，请先移除用户后删除.");
            }

            if (DBContext.Exist<SysRoleMenu>(SysRoleMenu.Meta.RoleId == id))
            {
                throw new BusiException("不能删除角色，因为存在角色下的菜单，请先移除菜单后删除.");
            }

            DBContext.Remove<SysRole>(id);

        }

        public IList<SysUser> ListUsersByRole(string roleId)
        {
            string sql = "SELECT * FROM MES_MASTER.SYS_USER WHERE USER_CODE IN (SELECT USER_CODE FROM MES_MASTER.SYS_ROLE_USER WHERE ROLE_ID = '{0}')";
            // sql = ConstantsHelper.GetHelper(this.UserSite, this.UserBU).GetSqlText(this.GetType().Name, "ListUsersByRole", "SEL_USERS_BY_ROLE");
            sql = string.Format(sql, roleId);
            return DBContext.ExcuteSql(string.Format(sql, roleId)).ToBusiObjects<SysUser>();
        }

        public bool ExistRoleMenu(string roleId, string menuCode)
        {
            return DBContext.Exist<SysRoleMenu>(SysRoleMenu.Meta.RoleId == roleId &
                SysRoleMenu.Meta.MenuCode == menuCode);
        }

        public SysMenu FindMenuByCode(string code)
        {
            SysMenu vm = DBContext.Find<SysMenu>(SysMenu.Meta.CODE == code);

            return vm;
        }

        public SysMenu FindMenuByUrl(string url)
        {
            SysMenu vm = DBContext.Find<SysMenu>(SysMenu.Meta.PageUrl == url);
            return vm;
        }


        public TextValueInfo[] ListParentMenu()
        {
            IList<SysMenu> menus = DBContext.FindArray<SysMenu>(SysMenu.Meta.LevelNo == 1 | SysMenu.Meta.LevelNo == 0, SysMenu.Meta.CODE.ASC);

            TextValueInfo[] vts = new TextValueInfo[menus.Count + 1];
            for (var i = 0; i < menus.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = menus[i].CODE;
                vts[i].Text = menus[i].Name;
            }


            vts[menus.Count] = new TextValueInfo();
            vts[menus.Count].Value = "000000";
            vts[menus.Count].Text = "Root Node";

            return vts;
        }

        /// <summary>
        /// 取得用戶主菜單
        /// </summary>
        /// <returns></returns>
        public IList<SysMenu> GetMenus()
        {
            return DBContext.FindArray<SysMenu>(SysMenu.Meta.LevelNo == 1, SysMenu.Meta.CODE.ASC);

            //IDbTransaction trans = DBContext.OpenTrans();
            //try
            //{

            //   // string dsql = @"DELETE  FROM PUBLIBLX.SYS_ROLE_USER WHERE ROLE_ID IN (SELECT ID FROM PUBLIBLX.SYS_ROLE  WHERE SITE = '{0}' AND BU = '{1}') AND USER_CODE = '{2}'";
            //    string dsql = @"SELECT* FROM MES_MASTER.SYS_MENU WHERE LEVEL_NO = 1   ORDER BY CODE";
            //    dsql = string.Format(dsql, this.UserSite, this.UserBU, userCode);
            //    DBContext.ExcuteSql(trans, dsql).ToNonQuery(); ;
            //    // DBContext.Remove<SysRoleUser>(trans, SysRoleUser.Meta.UserCode == userCode & SysRoleUser.Meta.RoleId == ssql.ID);
            //    if (items != null && items.Length > 0)
            //    {
            //        foreach (string item in items)
            //        {
            //            SysRoleUser ru = new SysRoleUser();
            //            ru.RoleId = item;
            //            ru.UserCode = userCode;
            //            ru.ID = PubHelper.GetHelper(DBContext).GetNextID().ToString();
            //            ru.UpdatedBy = this.UserCode;
            //            ru.UpdatedDate = DateTime.Now;
            //            DBContext.SaveAndUpdate<SysRoleUser>(trans, ru);
            //        }
            //    }
            //    trans.Commit();
            //}
            //catch (Exception ex)
            //{
            //    trans.Rollback();
            //    PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateUserRole");
            //    throw ex;
            //}
            //finally
            //{
            //    DBContext.ReleaseTrans(trans);
            //}
        }
        /// <summary>
        /// 取得用戶權限子級菜單
        /// </summary>
        /// <param name="functionCode"></param>
        /// <returns></returns>
        public IList<SysMenu> GetSubMenus(string menuCode)
        {
            IList<SysMenu> lstMenu = null;
            if (this.IsAdmin)
            {
                IDbTransaction trans = DBContext.OpenTrans();
                try
                {
                    string sql = "SELECT* FROM MES_MASTER.SYS_MENU WHERE PARENT_CODE = '{0}' ORDER BY CODE";
                    sql = string.Format(sql, menuCode);
                    lstMenu = DBContext.ExcuteSql(trans, sql).ToBusiObjects<SysMenu>();
                    trans.Commit();
                }
                catch (Exception ex)
                {
                    trans.Rollback();
                    PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "GetSubMenus");
                    throw ex;
                }
                finally
                {
                    DBContext.ReleaseTrans(trans);
                }

            }
            else
            {
                lstMenu = SpCaller.GetCaller(DBContext).CallGetSubmenus(this.UserCode, menuCode).ToBusiObjects<SysMenu>();
            }

            return lstMenu;
        }


        /// <summary>
        /// 列出需要認證的菜單
        /// </summary>
        /// <returns></returns>
        public IList<SysMenu> ListAuthorizabledMenus()
        {
            IList<SysMenu> lstMenu = null;

            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                string sql = " SELECT* FROM MES_MASTER.SYS_MENU t   WHERE t.LEVEL_NO = 1 ORDER BY t.Code";
                lstMenu = DBContext.ExcuteSql(trans, sql).ToBusiObjects<SysMenu>();
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "ListAuthorizabledMenus");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }


            return lstMenu;
        }

        /// <summary>
        /// 列出需要認證的子菜單
        /// </summary>
        /// <param name="funcCode"></param>
        /// <returns></returns>
        public IList<SysMenu> ListAuthorizabledSubFuncs(string funcCode)
        {
            //if (IsAdmin)
            //{
            return DBContext.FindArray<SysMenu>(SysMenu.Meta.ParentCode == funcCode, SysMenu.Meta.CODE.ASC);
            //}
            //else
            //{
            //    return SpCaller.GetCaller(DBContext).CallGetAuthSubmenus(this.UserCode, funcCode).ToBusiObjects<SysMenu>();
            //}
        }


        /// <summary>
        /// 判定用戶權限
        /// </summary>
        /// <param name="menuCode"></param>
        /// <param name="userCode"></param>
        /// <param name="permName"></param>
        /// <returns></returns>
        public bool ChkPermPrivilege(string menuCode, string userCode, string permName)
        {
            //object ret = SpCaller.GetCaller(DBContext).CallChkPermPrivilege(menuCode, userCode, permName).ExecuteOutParameters()["P_RET"];
            //return ret.ToString() == "1" ? true : false;
            return false;
        }


        /// <summary>
        /// 檢查Menu權限
        /// </summary>
        /// <param name="menuCode"></param>
        /// <param name="userCode"></param>
        /// <returns></returns>
        public bool ChkMenuPrivilege(string menuCode, string userCode)
        {
            object ret = SpCaller.GetCaller(DBContext).CallChkMenuPrivilege(menuCode, userCode).ExecuteOutParameters()["P_RET"];
            return ret.ToString() == "1" ? true : false;
        }

        /// <summary>
        /// 取得所有菜單信息
        /// </summary>
        /// <returns></returns>
        public IList<SysMenu> LoadAllMenuInfo()
        {
            // return DBContext.FindArray<SysMenu>(SysMenu.Meta.ID !=null);
            return DBContext.LoadArray<SysMenu>();
        }

        public IList<SysMenu> LoadMenuAll()
        {
            return DBContext.LoadArray<SysMenu>();
        }

        public void RemoveMenu(string code)
        {
            if (DBContext.Exist<SysRoleMenu>(SysRoleMenu.Meta.MenuCode == code))
            {
                throw new BusiException("不能删除菜单，因为存在角色在用此菜单，请先解除绑定再删除.");
            }

            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<SysMenu>(trans, SysMenu.Meta.CODE == code);

                DBContext.Remove<SysMenu>(trans, code);

                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveMenu");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }

        public void SaveMenu(SysMenu vmenu)
        {
            if (string.IsNullOrEmpty(vmenu.CODE))
            {
                vmenu.CODE = PubHelper.GetHelper(DBContext).GetNextID().ToString();
            }
            if (vmenu.ParentCode == "000000")
            {
                vmenu.IsRoot = 1;
                vmenu.LevelNo = 1;
            }
            else
            {
                vmenu.IsRoot = 0;
                vmenu.LevelNo = 2;
            }
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                SysMenu func = new SysMenu();
                func.ID = PubHelper.GetHelper(DBContext).GetNextID().ToString();
                func.CODE = vmenu.CODE;
                func.Name = vmenu.Name;
                func.PageUrl = vmenu.PageUrl;
                func.IsRoot = vmenu.IsRoot;
                func.LevelNo = vmenu.LevelNo;
                func.MEMO = vmenu.MEMO;
                func.ParentCode = vmenu.ParentCode;
                func.CreatedDate = DateTime.Now;
                func.UpdatedBy = this.UserCode;
                func.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<SysMenu>(trans, func);

                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveMenu");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }

        public bool ExistRoleUser(string userCode, string roleId)
        {
            return DBContext.Exist<SysRoleUser>(SysRoleUser.Meta.UserCode == userCode
                & SysRoleUser.Meta.RoleId == roleId);
        }
        public void UpdateRolePerm(string[] items, string roleId)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                //Clear history data
                var rms = DBContext.FindArray<SysRoleMenu>(SysRoleMenu.Meta.RoleId == roleId);
                //foreach (SysRoleMenu rm in rms)
                //{
                //    DBContext.Remove<SysRolePerm>(trans, SysRolePerm.Meta.RoleMenuId == rm.ID);
                //}
                DBContext.Remove<SysRoleMenu>(trans, SysRoleMenu.Meta.RoleId == roleId);
                //Update the new data
                string[] menus = items.Where(c => c.StartsWith("+")).ToArray();
                foreach (string m in menus)
                {
                    SysRoleMenu rm = new SysRoleMenu();
                    rm.ID = PubHelper.GetHelper(DBContext).GetNextID().ToString();
                    rm.RoleId = roleId;
                    rm.MenuCode = m.Replace("+", "");
                    rm.UpdatedBy = this.UserCode;
                    rm.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<SysRoleMenu>(trans, rm);

                    //var ps = items.Where(c => c.StartsWith(rm.MenuCode)).ToArray();
                    //foreach (string p in ps)
                    //{
                    //    SysRolePerm rp = new SysRolePerm();
                    //    rp.ID = PubHelper.GetHelper(DBContext).GetNextID().ToString();
                    //    rp.PermId = p.Split('+')[1];
                    //    rp.RoleMenuId = rm.ID;
                    //    rp.UpdatedBy = this.UserCode;
                    //    rp.UpdatedDate = DateTime.Now;

                    //    DBContext.SaveAndUpdate<SysRolePerm>(trans, rp);
                    //}
                }

                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateRolePerm");
                throw ex;
            }
        }

        /// <summary>
        /// 修改密碼
        /// </summary>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        public void UpdatePassword(String oldPassword, String newPassword)
        {
            if (String.IsNullOrEmpty(this.UserCode))
            {
                throw new BusiException("会话超时");
            }
            if (!DBContext.Exist<SysUser>(SysUser.Meta.UserCode == this.UserCode & SysUser.Meta.PWD == CryptographyManager.Instance.SymmetricEncrpyt(oldPassword, CryptographyManager.DEFAULT_KEY)))
            {
                throw new BusiException("用户原密码错误.", "100001");
            }
            SysUser user = new SysUser();
            user.UserCode = this.UserCode;
            user.PWD = CryptographyManager.Instance.SymmetricEncrpyt(newPassword, CryptographyManager.DEFAULT_KEY);
            DBContext.SaveAndUpdate<SysUser>(user);

        }

        public IList<BasBase> FindBaseInfo(string Code, string Name)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(Code))
            {
                ce = (BasBase.Meta.CODE == Code);
            }

            if (!string.IsNullOrEmpty(Name))
            {
                ce = (ce & BasBase.Meta.NAME.Like(Name));
            }

            //if (!string.IsNullOrEmpty(deptCode))
            //{
            //    ce = ce & (SysUser.Meta.DeptCode.Like(deptCode));
            //}

            // ce = ce & SysUser.Meta.SITE == this.UserSite;

            if (ce == null)
            {
                return DBContext.LoadArray<BasBase>();
            }

            return DBContext.FindArray<BasBase>(ce);

        }
        public IList<BasBase> FindBaseBySubCode(string subCode)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(subCode))
            {
                ce = (BasBase.Meta.SubCode == subCode);
            }


            if (ce == null)
            {
                return DBContext.LoadArray<BasBase>();
            }

            return DBContext.FindArray<BasBase>(ce);

        }
       
        public void SaveBaseInfo(BasBase bbase)
        {
            try
            {
                if (!DBContext.Exist<BasBase>(BasBase.Meta.SubCode == bbase.SubCode))
                {
                    bbase.CreatedDate = DateTime.Now;
                    bbase.UpdatedBy = this.UserCode;
                    bbase.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    DBContext.SaveAndUpdate<BasBase>(bbase);
                }
                else
                {
                    throw new Exception("子编码" + bbase.SubCode + "重复");
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveBaseInfo");
                throw ex;
            }
        }

        public void RemoveBaseInfo(string Code)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<BasBase>(trans, BasBase.Meta.ID == Code);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveBaseInfo");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }


        public void UpdateBaseInfo(string basId, BasBase bbase)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                BasBase ru = DBContext.Find<BasBase>(trans, BasBase.Meta.ID == basId);
                ru.CODE = bbase.CODE;
                ru.NAME = bbase.NAME;
                ru.SubCode = bbase.SubCode;
                ru.SubName = bbase.SubName;
                ru.MEMO = bbase.MEMO;
                ru.UpdatedBy = this.UserCode;
                ru.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<BasBase>(trans, ru);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateBaseInfo");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public IList<BasCode> FindBasCode(string ID, string Name)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(ID))
            {
                ce = (BasCode.Meta.ID == ID);
            }

            if (!string.IsNullOrEmpty(Name))
            {
                ce = (ce & BasCode.Meta.NAME.Like(Name));
            }

            if (ce == null)
            {
                return DBContext.LoadArray<BasCode>();
            }

            return DBContext.FindArray<BasCode>(ce);

        }
        public void SaveBasCode(BasCode bcode)
        {
            try
            {
                if (!DBContext.Exist<BasCode>(BasCode.Meta.ID == bcode.ID))
                {
                    bcode.CreatedDate = DateTime.Now;
                    bcode.UpdatedBy = this.UserCode;
                    bcode.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    DBContext.SaveAndUpdate<BasCode>(bcode);
                }
                else
                {
                    throw new Exception("编码重复");
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveBasCode");
                throw ex;
            }
        }

        public void RemoveBasCode(string ID)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<BasCode>(trans, BasCode.Meta.ID == ID);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveBasCode");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }


        public void UpdateBasCode(string basId, BasCode bcode)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                BasCode ru = DBContext.Find<BasCode>(trans, BasCode.Meta.ID == basId);
                ru.NAME = bcode.NAME;
                ru.TYPE = bcode.TYPE;
                ru.PREFIX = bcode.PREFIX;
                ru.DateFormat = bcode.DateFormat;
                ru.BindSequence = bcode.BindSequence;
                ru.CodeLen = bcode.CodeLen;
                ru.MEMO = bcode.MEMO;
                ru.UpdatedBy = this.UserCode;
                ru.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<BasCode>(trans, ru);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateBasCode");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public IList<BasCustom> FindBasCustom(string code, string Name)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(code))
            {
                ce = (BasCustom.Meta.CODE == code);
            }

            if (!string.IsNullOrEmpty(Name))
            {
                ce =  (ce &BasCustom.Meta.NAME.Like(Name));
            }

            if (ce == null)
            {
                return DBContext.LoadArray<BasCustom>();
            }

            return DBContext.FindArray<BasCustom>(ce);

        }
        public void SaveBasCustom(BasCustom bcode)
        {
            try
            {
                if (!DBContext.Exist<BasCustom>(BasCustom.Meta.CODE == bcode.CODE))
                {
                    bcode.CreatedDate = DateTime.Now;
                    bcode.UpdatedBy = this.UserCode;
                    DBContext.SaveAndUpdate<BasCustom>(bcode);
                }
                else
                {
                    throw new Exception("编码重复");
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveBasCustom");
                throw ex;
            }
        }

        public void RemoveBasCustom(string code, string name)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<BasCustom>(trans, BasCustom.Meta.CODE == code & BasCustom.Meta.NAME == name);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveBasCustom");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }


        public void UpdateBasCustom(string code, BasCustom bcode)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                BasCustom ru = DBContext.Find<BasCustom>(trans, BasCustom.Meta.CODE == code);
                ru.NAME = bcode.NAME;
                ru.ADDRESS = bcode.ADDRESS;
                ru.TransType = bcode.TransType;
                ru.ReceiveArea = bcode.ReceiveArea;
                ru.CONTACT = bcode.CONTACT;
                ru.MOBILE = bcode.MOBILE;
                ru.FAX = bcode.FAX;
                ru.InvoiceName = bcode.InvoiceName;
                ru.InvoiceNumber = bcode.InvoiceNumber;
                ru.MEMO = bcode.MEMO;
                ru.UpdatedBy = this.UserCode;
                ru.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<BasCustom>(trans, ru);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateBasCustom");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public IList<BasEquipment> FindBasEquipment(string code, string Name)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(code))
            {
                ce = (BasEquipment.Meta.CODE == code);
            }

            if (!string.IsNullOrEmpty(Name))
            {
                ce = (ce & BasEquipment.Meta.MachineName.Like(Name));
            }

            if (ce == null)
            {
                return DBContext.LoadArray<BasEquipment>();
            }

            return DBContext.FindArray<BasEquipment>(ce);

        }
        public void SaveBasEquipment(BasEquipment bcode)
        {
            try
            {
                if (!DBContext.Exist<BasEquipment>(BasEquipment.Meta.CODE == bcode.CODE))
                {
                    bcode.CreatedDate = DateTime.Now;
                    bcode.UpdatedBy = this.UserCode;
                    DBContext.SaveAndUpdate<BasEquipment>(bcode);
                }
                else
                {
                    throw new Exception("编码重复");
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveBasEquipment");
                throw ex;
            }
        }

        public void RemoveBasEquipment(string code)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<BasEquipment>(trans, BasEquipment.Meta.CODE == code);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveBasEquipment");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }


        public void UpdateBasEquipment(string code, BasEquipment bcode)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                BasEquipment ru = DBContext.Find<BasEquipment>(trans, BasEquipment.Meta.CODE == code);
                ru.COMPANY = bcode.COMPANY;
                ru.MachineName = bcode.MachineName;
                ru.MachineType = bcode.MachineType;
                ru.AxisNumber = bcode.AxisNumber;
                ru.MODEL = bcode.MODEL;
                ru.POWER = bcode.POWER;
                ru.LOCATION = bcode.LOCATION;
                ru.STATUS = bcode.STATUS;
                ru.OutCode = bcode.OutCode;
                ru.UseDate = bcode.UseDate;
                ru.MEMO = bcode.MEMO;
                ru.UpdatedBy = this.UserCode;
                ru.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<BasEquipment>(trans, ru);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateBasEquipment");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public IList<BasMateriel> FindBasMateriel(string cpartno, string qpartno, string Name)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(cpartno))
            {
                ce = (BasMateriel.Meta.CPARTNO == cpartno);
            }
            if (!string.IsNullOrEmpty(qpartno))
            {
                ce = (BasMateriel.Meta.QPARTNO == qpartno);
            }
            if (!string.IsNullOrEmpty(Name))
            {
                ce =( ce & BasMateriel.Meta.NAME.Like(Name));
            }

            if (ce == null)
            {
                return DBContext.LoadArray<BasMateriel>();
            }

            return DBContext.FindArray<BasMateriel>(ce);

        }
        public void SaveBasMateriel(BasMateriel bcode)
        {
            try
            {
                if (!DBContext.Exist<BasMateriel>(BasMateriel.Meta.CPARTNO == bcode.CPARTNO & BasMateriel.Meta.QPARTNO == bcode.QPARTNO))
                {
                    bcode.CreatedDate = DateTime.Now;
                    bcode.UpdatedBy = this.UserCode;
                    DBContext.SaveAndUpdate<BasMateriel>(bcode);
                }
                else
                {
                    throw new Exception("编码重复");
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveBasMateriel");
                throw ex;
            }
        }

        public void RemoveBasMateriel(string cpartno, string qpartno)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<BasMateriel>(trans, BasMateriel.Meta.CPARTNO == cpartno & BasMateriel.Meta.QPARTNO == qpartno);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveBasMateriel");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }


        public void UpdateBasMateriel(string cpart, BasMateriel bcode)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                BasMateriel ru = DBContext.Find<BasMateriel>(trans, BasMateriel.Meta.CPARTNO == cpart);
                ru.QPARTNO = bcode.QPARTNO;
                ru.NAME = bcode.NAME;
                ru.CUSTOMER = bcode.CUSTOMER;
                ru.MEMO = bcode.MEMO;
                ru.UpdatedBy = this.UserCode;
                ru.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<BasMateriel>(trans, ru);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateBasMateriel");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }

        public IList<BasSequence> FindBasSequence(string Name)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(Name))
            {
                ce = (BasSequence.Meta.SeqName == Name);
            }

            if (ce == null)
            {
                return DBContext.LoadArray<BasSequence>();
            }

            return DBContext.FindArray<BasSequence>(ce);

        }
        public void SaveBasSequence(BasSequence bcode)
        {
            try
            {
                if (!DBContext.Exist<BasSequence>(BasSequence.Meta.SeqName == bcode.SeqName))
                {
                    bcode.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    bcode.CreatedDate = DateTime.Now;
                    bcode.UpdatedBy = this.UserCode;
                    DBContext.SaveAndUpdate<BasSequence>(bcode);
                }
                else
                {
                    throw new Exception("编码重复");
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveBasSequence");
                throw ex;
            }
        }

        public void RemoveBasSequence(string ID)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<BasSequence>(trans, BasSequence.Meta.ID == ID);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveBasSequence");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }


        public void UpdateBasSequence(string ID, BasSequence bcode)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                BasSequence ru = DBContext.Find<BasSequence>(trans, BasSequence.Meta.ID == ID);
                ru.SeqName = bcode.SeqName;
                ru.FAMILY = bcode.FAMILY;
                ru.DigitalLen = bcode.DigitalLen;
                ru.DigitalType = bcode.DigitalType;
                ru.IncreaseMode = bcode.IncreaseMode;
                ru.CurrentNo = bcode.CurrentNo;
                ru.BU = bcode.BU;
                ru.SITE = bcode.SITE;
                ru.MEMO = bcode.MEMO;
                ru.UpdatedBy = this.UserCode;
                ru.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<BasSequence>(trans, ru);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateBasSequence");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }

        public TextValueInfo[] ListBindSeqNo()
        {
            IList<BasSequence> bseqs = DBContext.LoadArray<BasSequence>();

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].ID;
                vts[i].Text = bseqs[i].SeqName;
            }


            //vts[menus.Count] = new TextValueInfo();
            //vts[menus.Count].Value = "000000";
            //vts[menus.Count].Text = "Root Node";

            return vts;
        }

        public TextValueInfo[] ListBindCustName()
        {
            IList<BasCustom> bseqs = DBContext.LoadArray<BasCustom>();

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].CODE;
                vts[i].Text = bseqs[i].NAME;
            }

            return vts;
        }

        public TextValueInfo[] ListBindTemplateType()
        {
            IList<BasBase> objs = DBContext.FindArray<BasBase>(BasBase.Meta.CODE=="QZB17040008");

            TextValueInfo[] vts = new TextValueInfo[objs.Count];
            for (var i = 0; i < objs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = objs[i].SubCode;
                vts[i].Text = objs[i].SubName;
            }
            return vts;
        }

        public TextValueInfo[] ListBindUnsurenessRes()
        {
            IList<BasBase> objs = DBContext.FindArray<BasBase>(BasBase.Meta.CODE == "QZB17040010");

            TextValueInfo[] vts = new TextValueInfo[objs.Count];
            for (var i = 0; i < objs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = objs[i].SubCode;
                vts[i].Text = objs[i].SubName;
            }
            return vts;
        }

        public void SaveOrderInfo(OrderDetail obj)
        {
            try
            {
                bool bsum = false;
                //保存订单身  
                if (string.IsNullOrEmpty(obj.ID))
                {
                    obj.STATUS = "0";//订单状态（0：创建；1：发布；2：发货通知；3：关闭）
                    obj.MEMO = "创建";
                    obj.CreatedDate = DateTime.Now;
                    obj.UpdatedBy = this.UserCode;
                    obj.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    DBContext.SaveAndUpdate<OrderDetail>(obj);
                    bsum = true;
                }
                else
                {
                    obj.UpdatedDate = DateTime.Now;
                    obj.UpdatedBy = this.UserCode;
                    DBContext.SaveAndUpdate<OrderDetail>(obj);
                }
                //保存订单头
                if (!DBContext.Exist<OrderHead>(OrderHead.Meta.OrderNo == obj.OrderNo))
                {
                    OrderHead oh = new OrderHead();
                    oh.OrderNo = obj.OrderNo;
                    oh.CONTRACT = obj.CONTRACT;
                    oh.CustName = obj.CustName;
                    oh.OrderQuantity = obj.OrderQuantity;
                    oh.STATUS = "0";
                    oh.MEMO = "创建";
                    oh.CreatedDate = DateTime.Now;
                    oh.UpdatedBy = this.UserCode;
                    DBContext.SaveAndUpdate<OrderHead>(oh);
                }
                else
                {
                    if (bsum)
                    {
                        OrderHead oh = DBContext.Find<OrderHead>(OrderHead.Meta.OrderNo == obj.OrderNo);
                        oh.OrderQuantity += obj.OrderQuantity;
                        oh.UpdatedBy = this.UserCode;
                        oh.UpdatedDate = DateTime.Now;
                        DBContext.SaveAndUpdate<OrderHead>(oh);
                    }
                    //throw new Exception("订单号重复");
                }

                //保存历史记录
                OrderHistory ohistory = new OrderHistory();
                ohistory.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                ohistory.OrderNo = obj.OrderNo;
                ohistory.CONTRACT = obj.CONTRACT;
                ohistory.CustName = obj.CustName;
                ohistory.BatchNumber = obj.BatchNumber;
                ohistory.OrderQuantity = obj.OrderQuantity;
                ohistory.PartsdrawingCode = obj.PartsdrawingCode;
                ohistory.ProductName = obj.ProductName;
                ohistory.STATUS = obj.STATUS;
                ohistory.MEMO = obj.MEMO;
                ohistory.OutDate = obj.OutDate;
                ohistory.CreatedDate = DateTime.Now;
                ohistory.UpdatedBy = this.UserCode;

                DBContext.SaveAndUpdate<OrderHistory>(ohistory);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveOrderInfo");
                throw ex;
            }
        }
       
        public void RemoveOrderInfo(string ID)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                OrderDetail od = DBContext.Find<OrderDetail>(OrderDetail.Meta.ID == ID);
                if (od != null)
                {
                    IList<OrderDetail> lod = DBContext.FindArray<OrderDetail>(OrderDetail.Meta.OrderNo == od.OrderNo);
                    if (lod.Count == 1)
                    {
                        DBContext.Remove<OrderHead>(trans, OrderHead.Meta.OrderNo == od.OrderNo);
                    }
                }
                DBContext.Remove<OrderDetail>(trans, OrderDetail.Meta.ID == ID);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveOrderInfo");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public IList<OrderDetail> FindOrderInfo(string orderno, string parsdrawingno,string status="",string starttime="",string endtime="",string id="")
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(orderno))
            {
                ce = (OrderDetail.Meta.OrderNo == orderno);
            }
            if (!string.IsNullOrEmpty(parsdrawingno))
            {
                ce = (ce&OrderDetail.Meta.PartsdrawingCode == parsdrawingno);
            }
            if (!string.IsNullOrEmpty(status))
            {
                ce = (ce & OrderDetail.Meta.STATUS == status);
            }
            if (!string.IsNullOrEmpty(id))
            {
                ce = (ce & OrderDetail.Meta.ID == id);
            }
            if (!string.IsNullOrEmpty(starttime)&&!string.IsNullOrEmpty(endtime))
            {
                ce = (ce & OrderDetail.Meta.CreatedDate >= Convert.ToDateTime(starttime));
                ce = (ce & OrderDetail.Meta.CreatedDate <= Convert.ToDateTime(endtime));
            }

            if (ce == null)
            {
                return DBContext.LoadArray<OrderDetail>();
            }

            return DBContext.FindArray<OrderDetail>(ce);

        }
        
        public void SaveInWareHouseInfo(MaterialStock obj)
        {
            try
            {
                if (!DBContext.Exist<MaterialStock>(MaterialStock.Meta.MSN == obj.MSN))
                {
                    obj.STATUS = "0";//物料状态（0：入库；1：正常出库；2：退料；3：补料出库；4：报废）
                    obj.MEMO = "入库";
                    obj.CreatedDate = DateTime.Now;
                    obj.UpdatedBy = this.UserCode;
                    DBContext.SaveAndUpdate<MaterialStock>(obj);
                }
                else
                {
                    obj.STATUS = "0";//物料状态（0：入库；1：正常出库；2：退料；3：补料出库；4：报废）
                    obj.MEMO = "入库";
                    obj.UpdatedBy = this.UserCode;
                    obj.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<MaterialStock>(obj);

                    //throw new Exception("订单号重复");
                }

                //保存历史记录
                MaterialStockHistory ohistory = new MaterialStockHistory();
                ohistory.MSN = obj.MSN;
                ohistory.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                ohistory.MaterialCode = obj.MaterialCode;
                ohistory.MaterialName = obj.MaterialName;
                ohistory.MEMO = obj.MEMO;
                ohistory.UNIT = obj.UNIT;
                ohistory.UpdatedBy = obj.UpdatedBy;
                ohistory.UpdatedDate = obj.UpdatedDate == null ? obj.CreatedDate : obj.UpdatedDate;
                ohistory.CreatedDate = DateTime.Now;
                ohistory.CustName = obj.CustName;
                ohistory.BatchNumber = obj.BatchNumber;
                ohistory.DOCUMENTID = obj.DOCUMENTID;
                ohistory.STATUS = obj.STATUS;
                ohistory.QUANTITY = obj.BasQty;
                ohistory.StockHouse = obj.StockHouse;
                ohistory.StatusMemo = "入库";
                       
                DBContext.SaveAndUpdate<MaterialStockHistory>(ohistory);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveInWareHouseInfo");
                throw ex;
            }
        }

        public void RemoveInWareHouseInfo(string msn)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<MaterialStock>(trans, MaterialStock.Meta.MSN == msn);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveInWareHouseInfo");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public IList<MaterialStock> FindInWareHouseInfo(string msn, string materialno)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(msn))
            {
                ce = (MaterialStock.Meta.MSN == msn);
            }
            if (!string.IsNullOrEmpty(materialno))
            {
                ce = (MaterialStock.Meta.MaterialCode == materialno);
            }
            if (ce == null)
            {
                return DBContext.LoadArray<MaterialStock>();
            }
            return DBContext.FindArray<MaterialStock>(ce);
        }
        public TextValueInfo[] ListBindReceiveHouse()
        {
            IList<BasBase> bseqs = DBContext.FindArray<BasBase>(BasBase.Meta.CODE == "QZB17040007");

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].SubCode;
                vts[i].Text = bseqs[i].SubName;
            }

            return vts;
        }
        public TextValueInfo[] ListBindUnit()
        {
            IList<BasBase> bseqs = DBContext.FindArray<BasBase>(BasBase.Meta.CODE == "QZB17040006");

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].SubCode;
                vts[i].Text = bseqs[i].SubName;
            }

            return vts;
        }

        /// <summary>
        /// 獲取該工站的服務地址列表
        /// </summary>
        /// <param name="macOrIP">客戶端工站IP</param>
        /// <returns></returns>
        public IList<SysMidsvcConfig> GetMidsvcList()
        {
            return DBContext.FindArray<SysMidsvcConfig>(SysMidsvcConfig.Meta.SITE == this.UserSite
                & SysMidsvcConfig.Meta.BU == this.UserBU, SysMidsvcConfig.Meta.ConnCount.ASC);
        }
        /// <summary>
        /// 從數據庫中下載模版文件到服務器目錄
        /// </summary>
        /// <param name="tplId">模版ID</param>
        /// <returns>模版在服務器路徑</returns>
        public string DownloadLabelTpl(string tplId)
        {
            BasLabelTemplate tpl = DBContext.Find<BasLabelTemplate>(BasLabelTemplate.Meta.ID == tplId);
            if (tpl != null)
            {
                string timeStamp = ((DateTime)tpl.UpdatedDate).ToString("yyyyMMddHHmmSS");
                string filePath = tplPath + "\\" + tpl.FAMILY;
                if (!Directory.Exists(filePath))
                {
                    Directory.CreateDirectory(filePath);
                }
                //判定是否已經下載了文件，如果已下載就直接返回路徑
                string fileName = filePath + "\\" + tpl.TplName + "_" + timeStamp + ".lab";
                if (File.Exists(fileName))
                {
                    return fileName;
                }
                //如果文件已經更新，先刪除舊文件
                DirectoryInfo di = new DirectoryInfo(filePath);
                foreach (FileInfo fi in di.GetFiles(tpl.TplName + "*.lab"))
                {
                    fi.Delete();
                }
                //從數據庫中下載到服務器
                //System.Data.IDataReader rd = DBContext.ExcuteSql(ConstantsHelper.GetHelper(this.UserSite, this.UserBU).GetSqlText(BLLConstants.Route_BO_NAME, "DownloadLabelTpl", "SEL_LABEL_TPL_DATA"))
                System.Data.IDataReader rd = DBContext.ExcuteSql("SELECT * FROM FMGR.BAS_LABEL_TEMPLATE_FILE WHERE TPL_ID = :tplId")
                    .AddInParameter("tplId", System.Data.DbType.String, tplId)
                    .ToDataRead();
                // Writes the BLOB to a file (*.bmp).
                FileStream stream;
                // Streams the BLOB to the FileStream object.
                BinaryWriter writer;
                // Size of the BLOB buffer.
                int bufferSize = 512;
                // The BLOB byte[] buffer to be filled by GetBytes.
                byte[] outByte = new byte[bufferSize];
                // The bytes returned from GetBytes.
                long retval;
                // The starting position in the BLOB output.
                long startIndex = 0;
                if (rd.Read())
                {
                    startIndex = 0;
                    // Create a file to hold the output.
                    stream = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write);
                    writer = new BinaryWriter(stream);

                    // Read bytes into outByte[] and retain the number of bytes returned.
                    retval = rd.GetBytes(3, startIndex, outByte, 0, bufferSize);

                    // Continue while there are bytes beyond the size of the buffer.
                    while (retval == bufferSize)
                    {
                        writer.Write(outByte);
                        writer.Flush();

                        // Reposition start index to end of last buffer and fill buffer.
                        startIndex += bufferSize;
                        retval = rd.GetBytes(3, startIndex, outByte, 0, bufferSize);
                    }
                    if (retval > 0)
                    {
                        // Write the remaining buffer.
                        writer.Write(outByte, 0, (int)retval - 1);
                    }
                    writer.Flush();

                    // Close the output file.
                    writer.Close();
                    stream.Close();
                    //byte[] blob = new Byte[(rd.GetBytes(0, 0, null, 0, int.MaxValue))];
                    //rd.GetBytes(0, 0, blob, 0, blob.Length);                    
                    //rd.Close();
                    //File.WriteAllBytes(fileName, blob);
                    return fileName;
                }
            }

            return "";
        }
        /// <summary>
        /// 取得打印模版參數值
        /// </summary>
        /// <param name="labelType"></param>
        /// <param name="pid"></param>
        /// <returns></returns>
        public IList<TextValueInfo> ListLabelParams(string labelType, string pid)
        {
            BasLabelTypeConfig ltf = DBContext.Find<BasLabelTypeConfig>(BasLabelTypeConfig.Meta.TplType == labelType);
            if (ltf == null)
            {
                throw new BusiException("模版類型沒有綁定參數設置。");
            }

            IDictionary rets = SpCaller.GetCaller(DBContext).CallGetLabelParams(ltf.BindFunc, pid).ExecuteOutParameters();
            SPMessage ret = new SPMessage();
            ret.Result = (string)rets["P_RET"];
            ret.Message = (string)rets["P_MSG"];
            IList<TextValueInfo> ls = new List<TextValueInfo>();
            if (ret.Result == "OK")
            {
                string[] kvs = ret.Message.Split('^');

                foreach (string kv in kvs)
                {
                    string[] tvis = kv.Split('=');
                    ls.Add(new TextValueInfo() { Text = tvis[0], Value = tvis[1] });
                }

                return ls;
            }
            else
            {
                throw new BusiException(ret.Message);
            }
        }

        /// <summary>
        /// 得到指定模版類型變量參數
        /// </summary>
        /// <param name="data"></param>
        /// <param name="labelId"></param>
        /// <returns></returns>
        public SPMessage GetLabelParameters(string data, string labelId)
        {
            IDictionary rets = SpCaller.GetCaller(DBContext).CallGetLabelParameters(data, labelId).ExecuteOutParameters();
            SPMessage ret = new SPMessage();
            ret.Result = (string)rets["P_RET"];
            ret.Message = (string)rets["P_MSG"];
            return ret;
        }

        public TextValueInfo[] ListBindWorkOrder(string status)
        {
            IList<WorkOrder> bseqs = DBContext.FindArray<WorkOrder>(WorkOrder.Meta.STATUS == status);

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].WO;
                vts[i].Text = bseqs[i].WO;
            }

            return vts;
        }

        /// <summary>
        /// 獲取备料信息
        /// </summary>
        /// <param name="macOrIP">客戶端工站IP</param>
        /// <returns></returns>
        public IList<MaterialStock> QueryBackupInfo(string workorder)
        {
            WorkOrder wo = DBContext.Find<WorkOrder>(WorkOrder.Meta.WO == workorder);
            if (wo != null)
            {
                return DBContext.FindArray<MaterialStock>( MaterialStock.Meta.MaterialName == wo.PartsdrawingCode&(MaterialStock.Meta.STATUS=="0"|MaterialStock.Meta.STATUS=="2"),MaterialStock.Meta.MSN.ASC);
            }
            else
            {
                if(string.IsNullOrEmpty(workorder))
                {
                    //查询工单运行中，且发料数量为0的工单。
                    IList<WorkOrder> wos = DBContext.FindArray<WorkOrder>(WorkOrder.Meta.STATUS == "1" & WorkOrder.Meta.MaterialQty < 1, WorkOrder.Meta.UpdatedDate.DESC);
                    if(wos.Count>0)
                    {
                        return DBContext.FindArray<MaterialStock>(MaterialStock.Meta.MaterialName == wos[0].PartsdrawingCode & (MaterialStock.Meta.STATUS == "0" | MaterialStock.Meta.STATUS == "2"), MaterialStock.Meta.MSN.ASC);
                    }
                }
                return null;
            }
        }
        /// <summary>
        /// 保存发料信息
        /// </summary>
        /// <param name="obj"></param>
        public void SaveOutWareHouseInfo(MaterialStockHistory obj)
        {
            try
            {
                //判断是否超发
                IList<WorkOrder> wo = FindWorkOrderInfo(obj.WorkOrder);
                if(wo!=null)
                {
                    if(wo[0].MaterialQty>wo[0].PlanQuantity|| wo[0].MaterialQty == wo[0].PlanQuantity)
                    {
                        throw new Exception("工单发料已满，禁止超发！");
                    }
                }
                else
                {
                    throw new Exception("无此工单!");
                }
                //IList<MaterialStockHistory> mhs = QueryOutHistoryInfo(obj.WorkOrder);
                //更新库存状态
                MaterialStock ms = DBContext.Find<MaterialStock>(MaterialStock.Meta.MSN == obj.MSN);
                ms.STATUS = "1";//物料状态（0：入库；1：正常出库；2：退料；3：补料出库；4：报废）
                ms.MEMO = "正常出库";
                ms.UpdatedBy = this.UserCode;
                ms.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<MaterialStock>(ms);
               

                //保存历史记录
                MaterialStockHistory ohistory = new MaterialStockHistory();
                ohistory.MSN = ms.MSN;
                ohistory.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                ohistory.MaterialCode = ms.MaterialCode;
                ohistory.MaterialName = ms.MaterialName;
                ohistory.MEMO = ms.MEMO;
                ohistory.UNIT = ms.UNIT;
                ohistory.STATUS = "1";
                ohistory.UpdatedBy = this.UserCode;
                ohistory.CreatedDate = DateTime.Now;
                ohistory.CustName = ms.CustName;
                ohistory.BatchNumber = ms.BatchNumber;
                ohistory.DOCUMENTID = ms.DOCUMENTID;
                ohistory.WorkOrder = obj.WorkOrder;
                ohistory.MaterialHandler = obj.MaterialHandler;
                ohistory.StatusMemo = "正常出库";
                ohistory.QUANTITY = ms.BasQty;
                ohistory.StockHouse = obj.StockHouse;
                DBContext.SaveAndUpdate<MaterialStockHistory>(ohistory);

                //更新工单发料数量
                if(wo[0].MaterialQty==null)
                {
                    wo[0].MaterialQty = 1;
                }
                else
                {
                    wo[0].MaterialQty = wo[0].MaterialQty + 1;
                }               
                DBContext.SaveAndUpdate<WorkOrder>(wo[0]);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveOutWareHouseInfo");
                throw ex;
            }
        }
        /// <summary>
        /// 保存补料信息
        /// </summary>
        /// <param name="obj"></param>
        public void SaveReSendMaterialInfo(MaterialStockHistory obj)
        {
            try
            {                
                IList<WorkOrder> wo = FindWorkOrderInfo(obj.WorkOrder);
                if (wo != null)
                {
                    //IList<MaterialStockHistory> mhs = QueryOutHistoryInfo(obj.WorkOrder);
                    //更新库存状态
                    MaterialStock ms = DBContext.Find<MaterialStock>(MaterialStock.Meta.MSN == obj.MSN);
                    ms.STATUS = "3";//物料状态（0：入库；1：正常出库；2：退料；3：补料出库；4：报废）
                    ms.MEMO = "补料出库";
                    ms.UpdatedBy = this.UserCode;
                    ms.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<MaterialStock>(ms);


                    //保存历史记录
                    MaterialStockHistory ohistory = new MaterialStockHistory();
                    ohistory.MSN = ms.MSN;
                    ohistory.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    ohistory.MaterialCode = ms.MaterialCode;
                    ohistory.MaterialName = ms.MaterialName;
                    ohistory.MEMO = ms.MEMO;
                    ohistory.UNIT = ms.UNIT;
                    ohistory.STATUS = "3";
                    ohistory.UpdatedBy = this.UserCode;
                    ohistory.CreatedDate = DateTime.Now;
                    ohistory.CustName = ms.CustName;
                    ohistory.BatchNumber = ms.BatchNumber;
                    ohistory.DOCUMENTID = ms.DOCUMENTID;
                    ohistory.WorkOrder = obj.WorkOrder;
                    ohistory.MaterialHandler = obj.MaterialHandler;
                    ohistory.StatusMemo = "补料出库";
                    ohistory.QUANTITY = ms.BasQty;
                    DBContext.SaveAndUpdate<MaterialStockHistory>(ohistory);

                    //更新工单发料数量
                    wo[0].MaterialQty = wo[0].MaterialQty + 1;
                    DBContext.SaveAndUpdate<WorkOrder>(wo[0]);
                }
                else
                {
                    throw new Exception("无此工单!");
                }                
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveReSendMaterialInfo");
                throw ex;
            }
        }
        /// <summary>
        /// 保存退料信息
        /// </summary>
        /// <param name="obj"></param>
        public void SaveReturnMaterialInfo(string MSN)
        {
            try
            {
                MaterialStockHistory msh = DBContext.Find<MaterialStockHistory>(MaterialStockHistory.Meta.MSN == MSN & (MaterialStockHistory.Meta.STATUS == "1" | MaterialStockHistory.Meta.STATUS == "3"));
                
                if (msh != null)
                {
                    //更新库存状态
                    MaterialStock ms = DBContext.Find<MaterialStock>(MaterialStock.Meta.MSN == MSN);
                    ms.STATUS = "2";//物料状态（0：入库；1：正常出库；2：退料；3：补料出库；4：报废）
                    ms.MEMO = "退料";
                    ms.UpdatedBy = this.UserCode;
                    ms.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<MaterialStock>(ms);


                    //保存历史记录
                    MaterialStockHistory ohistory = new MaterialStockHistory();
                    ohistory.MSN = ms.MSN;
                    ohistory.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    ohistory.MaterialCode = ms.MaterialCode;
                    ohistory.MaterialName = ms.MaterialName;
                    ohistory.MEMO = ms.MEMO;
                    ohistory.UNIT = ms.UNIT;
                    ohistory.STATUS = "2";
                    ohistory.UpdatedBy = this.UserCode;
                    ohistory.CreatedDate = DateTime.Now;
                    ohistory.CustName = ms.CustName;
                    ohistory.BatchNumber = ms.BatchNumber;
                    ohistory.DOCUMENTID = ms.DOCUMENTID;
                    ohistory.WorkOrder = msh.WorkOrder;
                    ohistory.StatusMemo = "退料";
                    ohistory.QUANTITY = ms.BasQty;
                    ohistory.StockHouse = ms.StockHouse;
                    DBContext.SaveAndUpdate<MaterialStockHistory>(ohistory);

                    //更新工单发料数量
                    IList<WorkOrder> wo = FindWorkOrderInfo(msh.WorkOrder);
                    if (wo[0].MaterialQty > 0)
                    {
                        wo[0].MaterialQty = wo[0].MaterialQty - 1;
                    }
                    DBContext.SaveAndUpdate<WorkOrder>(wo[0]);
                }
                else
                {
                    throw new Exception("无此工单!");
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveReSendMaterialInfo");
                throw ex;
            }
        }
        /// <summary>
        /// 獲取领料记录信息
        /// </summary>
        /// <param name="workorder">领料工单</param>
        /// <returns></returns>
        public IList<MaterialStockHistory> QueryOutHistoryInfo(string workorder)
        {           
           return DBContext.FindArray<MaterialStockHistory>(MaterialStockHistory.Meta.WorkOrder == workorder, MaterialStockHistory.Meta.UpdatedDate.DESC);
            
        }
        /// <summary>
        /// 獲取领料记录信息
        /// </summary>
        /// <param name="workorder">领料工单</param>
        /// <returns></returns>
        public IList<MaterialStockHistory> QueryOutHistoryInfo(string workorder,string status)
        {
            return DBContext.FindArray<MaterialStockHistory>(MaterialStockHistory.Meta.WorkOrder == workorder&MaterialStockHistory.Meta.STATUS==status, MaterialStockHistory.Meta.UpdatedDate.DESC);

        }

        /// <summary>
        /// 查询领料记录信息
        /// </summary>
        /// <param name="workorder">领料工单</param>
        /// <returns></returns>
        public IList<MaterialStockHistory> FindMaterialHistory(string workorder,string status,string MSN,string materialname,string custname,string starttime,string endtime,string batchnumber="")
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(workorder))
            {
                ce = (MaterialStockHistory.Meta.WorkOrder == workorder);
            }

            if (!string.IsNullOrEmpty(status))
            {
                if(status.IndexOf('^')!=-1)
                {
                    string[] strtemp = status.Split('^');
                    ce = (ce & (MaterialStockHistory.Meta.STATUS == strtemp [0]| MaterialStockHistory.Meta.STATUS == strtemp[1]));
                }
                ce =  (ce &MaterialStockHistory.Meta.STATUS==status);
            }

            if (!string.IsNullOrEmpty(MSN))
            {
                ce = (ce & MaterialStockHistory.Meta.MSN == MSN);
            }

            if (!string.IsNullOrEmpty(materialname))
            {
                ce = (ce & MaterialStockHistory.Meta.MaterialName == materialname);
            }
            if (!string.IsNullOrEmpty(custname))
            {
                ce = (ce & MaterialStockHistory.Meta.CustName == custname);
            }
            if (!string.IsNullOrEmpty(batchnumber))
            {
                ce = (ce & MaterialStockHistory.Meta.BatchNumber == batchnumber);
            }
            if (!string.IsNullOrEmpty(starttime)&& !string.IsNullOrEmpty(endtime))
            {
                ce = (ce & MaterialStockHistory.Meta.CreatedDate >= Convert.ToDateTime(starttime));
                ce =( ce & MaterialStockHistory.Meta.CreatedDate <= Convert.ToDateTime(endtime));
            }
            else
            {
                ce = (ce & MaterialStockHistory.Meta.CreatedDate >= DateTime.Now.AddDays(-7));
                ce = (ce & MaterialStockHistory.Meta.CreatedDate <= DateTime.Now);
            }          

            return DBContext.FindArray<MaterialStockHistory>(ce);

        }

        public void SaveLabelReprint(ReprintLog obj)
        {
            try
            {
                obj.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                obj.CreatedDate = DateTime.Now;
                obj.UpdatedBy = this.UserCode;
                obj.ReprintBy = this.UserCode;
                DBContext.SaveAndUpdate<ReprintLog>(obj); 
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveLabelReprint");
                throw ex;
            }
        }

        public IList<ReprintLog> FindReprintLogInfo(string sn)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(sn))
            {
                ce = (ReprintLog.Meta.SN == sn);
            }
             
            if (ce == null)
            {
                return DBContext.LoadArray<ReprintLog>();
            }
            return DBContext.FindArray<ReprintLog>(ce);
        }

        public void SavePartsDrawing(PartsdrawingCode obj)
        {
            try
            {
                obj.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();                
                obj.CreatedDate = DateTime.Now;
                obj.UpdatedBy = this.UserCode;
                obj.ACTIVE = "1";                    
                DBContext.SaveAndUpdate<PartsdrawingCode>(obj); 
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SavePartsDrawing");
                throw ex;
            }
        }

        public IList<PartsdrawingCode> FindPartsdrawingInfo(string pdcode,string custcode="",string starttime="",string endtime="")
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(pdcode))
            {
                ce = (PartsdrawingCode.Meta.PartsCode == pdcode);
            }
            if (!string.IsNullOrEmpty(custcode))
            {
                ce = (ce&PartsdrawingCode.Meta.CustCode == custcode);
            }
            if (!string.IsNullOrEmpty(starttime)&&!string.IsNullOrEmpty(endtime))
            {
                ce = (ce&PartsdrawingCode.Meta.CreatedDate>= Convert.ToDateTime(starttime));
                ce = (ce & PartsdrawingCode.Meta.CreatedDate <= Convert.ToDateTime(endtime));
            }

            if (ce == null)
            {
                return DBContext.LoadArray<PartsdrawingCode>();
            }
            return DBContext.FindArray<PartsdrawingCode>(ce);
        }

        public void RemovePartsdrawingNo(string ID)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                PartsdrawingCode od = DBContext.Find<PartsdrawingCode>(PartsdrawingCode.Meta.ID == ID);
                if (od != null)
                {                    
                    DBContext.Remove<PartsdrawingCode>(trans, PartsdrawingCode.Meta.ID == ID);                    
                }               
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemovePartsdrawingInfo");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public TextValueInfo[] ListBindProductName()
        {
            IList<BasBase> bseqs = DBContext.FindArray<BasBase>(BasBase.Meta.CODE=="QZB17050013");

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].SubCode;
                vts[i].Text = bseqs[i].SubName;
            }
            return vts;
        }

        public void SaveWorkOrderInfo(WorkOrder obj)
        {
            try
            {
                obj.UpdatedDate = DateTime.Now;
                obj.UpdatedBy = this.UserCode;
                //obj.STATUS = "0";//状态（0：创建；1：运行；2：暂停；3：关闭；）
                //obj.MEMO = "创建";
                DBContext.SaveAndUpdate<WorkOrder>(obj);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveWorkOrderInfo");
                throw ex;
            }
        }
        public void UpdateWorkOrderInfo(string workorder,string status)
        {
            try
            {
                WorkOrder wo = DBContext.Find<WorkOrder>(WorkOrder.Meta.WO == workorder);
                if (wo != null)
                {
                    if (status == "1")
                    {
                        if (wo.STATUS == "0" || wo.STATUS == "2")
                        {
                            wo.STATUS = status;
                            wo.MEMO = "运行";
                        }
                        else
                        {
                            throw new BusiException("不能运行工单，因为它正在运行或已经关闭.");
                        }
                    }
                    else
                    {
                        wo.STATUS = status;//状态（0：创建；1：运行；2：暂停；3：关闭；）
                        switch(status)
                        {
                            case "0":
                                wo.MEMO = "创建";
                                break;
                            case "1":
                                wo.MEMO = "运行";
                                break;
                            case "2":
                                wo.MEMO = "暂停";
                                break;
                            case "3":
                                wo.MEMO = "关闭";
                                break;
                        }
                    }
                    wo.UpdatedDate = DateTime.Now;
                    wo.UpdatedBy = this.UserCode;
                    
                }
                DBContext.SaveAndUpdate<WorkOrder>(wo);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "UpdateWorkOrderInfo");
                throw ex;
            }
        }

        public void RemoveWorkOrder(string workorder)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                WorkOrder wo = DBContext.Find<WorkOrder>(WorkOrder.Meta.WO == workorder);
                if (wo != null)
                {
                    if (wo.STATUS == "0" || wo.STATUS == "3")//状态（0：创建；1：运行；2：暂停；3：关闭；）
                    {
                        DBContext.Remove<WorkOrder>(trans, WorkOrder.Meta.WO == workorder);
                    }
                    else
                    {
                        throw new BusiException("不能删除工单，因为它在运行或暂停状态，请关闭后删除.");
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveWorkOrder");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public IList<WorkOrder> FindWorkOrderInfo(string workorder)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(workorder))
            {
                ce = (WorkOrder.Meta.WO == workorder);
            }

            if (ce == null)
            {
                return DBContext.LoadArray<WorkOrder>();
            }
            return DBContext.FindArray<WorkOrder>(ce);
        }
        public IList<WorkOrder> FindWorkOrderInfo(WorkOrder workorder)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(workorder.WO))
            {
                ce = (WorkOrder.Meta.WO == workorder.WO);
            }
            if(!string.IsNullOrEmpty(workorder.OrderNumber))
            {
                ce = (ce & WorkOrder.Meta.OrderNumber == workorder.OrderNumber);
            }
            if(!string.IsNullOrEmpty(workorder.PartsdrawingCode))
            {
                ce = (ce & WorkOrder.Meta.PartsdrawingCode == workorder.PartsdrawingCode);
            }
            if(!string.IsNullOrEmpty(workorder.STATUS))
            {
                ce = (ce & WorkOrder.Meta.STATUS == workorder.STATUS);
            }
            if (!string.IsNullOrEmpty(workorder.CustName))
            {
                ce = (ce & WorkOrder.Meta.CustName == workorder.CustName);
            }
            if (null!=workorder.StartTime&&null!=workorder.EndTime)
            {
                ce = (ce & WorkOrder.Meta.CreatedDate >= workorder.StartTime);
                ce = (ce & WorkOrder.Meta.CreatedDate <= workorder.EndTime);
            }
            if (ce == null)
            {
                return DBContext.LoadArray<WorkOrder>();
            }
            return DBContext.FindArray<WorkOrder>(ce);
        }

        public IList<WorkOrder> FindWorkOrderByPartsdrawingCode(string partsdrawingcode)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(partsdrawingcode))
            {
                ce = (WorkOrder.Meta.PartsdrawingCode == partsdrawingcode);
            }

            if (ce == null)
            {
                return DBContext.LoadArray<WorkOrder>();
            }
            return DBContext.FindArray<WorkOrder>(ce);
        }

        public IList<WorkOrder> FindWorkOrderByStatus(string status,bool isAssign)
        {
            IList<WorkOrder> bseqs = null;
            if (isAssign)
            {
                bseqs = DBContext.FindArray<WorkOrder>(WorkOrder.Meta.STATUS == status, WorkOrder.Meta.StartTime.ASC);
            }
            else
            {
                bseqs = DBContext.FindArray<WorkOrder>(WorkOrder.Meta.STATUS == status&(WorkOrder.Meta.WORKER==null|WorkOrder.Meta.WORKER==""), WorkOrder.Meta.StartTime.ASC);
            }
            return bseqs;            
        }
        public TextValueInfo[] ListBindOrderNo()
        {
            IList<OrderHead> bseqs = DBContext.FindArray<OrderHead>(OrderHead.Meta.STATUS == "1");//订单状态（0：创建；1：发布；2：发货通知；3：关闭）

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].OrderNo;
                vts[i].Text = bseqs[i].OrderNo;
            }
            return vts;
        }
        public TextValueInfo[] ListBindPartsDrawingCode()
        {
            IList<PartsdrawingCode> bseqs = DBContext.FindArray<PartsdrawingCode>(PartsdrawingCode.Meta.ACTIVE == "1");

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].PartsCode;
                vts[i].Text = bseqs[i].PartsCode;
            }
            return vts;
        }

        public TextValueInfo[] ListBindPartsDrawingCodebyOrder(string order)
        {
            IList<OrderDetail> bseqs = DBContext.FindArray<OrderDetail>(OrderDetail.Meta.OrderNo == order);

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                if (!DBContext.Exist<WorkOrder>(WorkOrder.Meta.PartsdrawingCode == bseqs[i].PartsdrawingCode))
                {
                    vts[i] = new TextValueInfo();
                    vts[i].Value = bseqs[i].PartsdrawingCode;
                    vts[i].Text = bseqs[i].PartsdrawingCode;
                }
            }
            return vts;
        }

        public TextValueInfo[] ListBindMachineType()
        {
            IList<BasBase> bseqs = DBContext.FindArray<BasBase>(BasBase.Meta.CODE == "QZB17040009");

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].SubCode;
                vts[i].Text = bseqs[i].SubName;
            }
            return vts;
        }

        public TextValueInfo[] ListBindMachines(string code)
        {
            IList<BasBase> bseqs = DBContext.FindArray<BasBase>(BasBase.Meta.CODE == code);

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                vts[i] = new TextValueInfo();
                vts[i].Value = bseqs[i].SubCode;
                vts[i].Text = bseqs[i].SubName;
            }
            return vts;
        }

        public IList<MaterialStock> FindBackupInfo(string workorder)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(workorder))
            {
                WorkOrder wo = DBContext.Find<WorkOrder>(WorkOrder.Meta.WO == workorder);               
               if(wo!=null)
                {
                    //ce = (MaterialStock.Meta.MaterialName == wo.PartsdrawingCode&MaterialStock.Meta.BatchNumber==wo.BatchNumber);
                    ce = (MaterialStock.Meta.MaterialName == wo.PartsdrawingCode);
                }
            }
            else
            {
                return null;
            } 
            return DBContext.FindArray<MaterialStock>(ce);
        }
        public TextValueInfo[] ListBindUserByOperators()
        {
            IList<SysRoleUser> bseqs = DBContext.FindArray<SysRoleUser>(SysRoleUser.Meta.RoleId == "1000000006");//操作工角色为1000000006

            TextValueInfo[] vts = new TextValueInfo[bseqs.Count];
            for (var i = 0; i < bseqs.Count; i++)
            {
                SysUser su = FindUserByCode(bseqs[i].UserCode);
                vts[i] = new TextValueInfo();
                vts[i].Value = su.UserCode;
                vts[i].Text = su.UserName;
            }
            return vts;
        }

        public void SaveWorkOrderAssign(string workorder,string operater,string operatercode)
        {
            try
            {
                WorkOrder obj = DBContext.Find<WorkOrder>(WorkOrder.Meta.WO == workorder);
                obj.WORKER = operatercode;
                obj.WorkerName = operater;
                obj.UpdatedDate = DateTime.Now;
                obj.UpdatedBy = this.UserCode;                
                DBContext.SaveAndUpdate<WorkOrder>(obj);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveWorkOrderAssign");
                throw ex;
            }
        }

        public string GetPSNByMSN(string MSN)
        {
            try
            {
                //产生规则：先在tracking_wip表中查找已经绑定的MSN记录，在记录上加1即可.
                string sql = "select count(0) from MES_MASTER.TRACKING_WIP where MSN='" + MSN + "'";
                int num = Convert.ToInt32(DBContext.ExcuteSql(sql).ToDataSet().Tables[0].Rows[0][0].ToString());
                num = num + 1;
                string PSN = MSN + num.ToString().PadLeft(2, '0');
                IList<MaterialStockHistory> msh = DBContext.FindArray<MaterialStockHistory>(MaterialStockHistory.Meta.MSN == MSN & MaterialStockHistory.Meta.STATUS == "1");
                if (msh.Count > 0)
                {
                    WorkOrder wo = DBContext.Find<WorkOrder>(WorkOrder.Meta.WO == msh[0].WorkOrder);
                    if(wo!=null)
                    {
                        TrackingWip tw = new TrackingWip();
                        tw.PSN = PSN;
                        tw.MSN = MSN;
                        tw.WorkOrder = wo.WO;
                        tw.PartsdrawingCode = wo.PartsdrawingCode;
                        tw.PartsName = wo.ProductName;
                        tw.PartsCode = wo.ProductCode;
                        tw.BatchNumber = wo.BatchNumber;
                        tw.StationName = "PRINT";
                        tw.QUANTITY = 1;
                        tw.STATUS = "P";
                        tw.InStatioonTime = DateTime.Now;
                        tw.OutStationTime = DateTime.Now;
                        tw.CreatedDate = DateTime.Now;
                        tw.UpdatedBy = this.UserCode;
                        DBContext.SaveAndUpdate<TrackingWip>(tw);

                        TrackingHistory th = new TrackingHistory();
                        th.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                        th.PSN = PSN;
                        th.MSN = MSN;
                        th.WorkOrder = wo.WO;
                        th.PartsdrawingCode = wo.PartsdrawingCode;
                        th.PartsName = wo.ProductName;
                        th.PartsCode = wo.ProductCode;
                        th.BatchNumber = wo.BatchNumber;
                        th.StationName = "PRINT";
                        th.QUANTITY = 1;
                        th.STATUS = "P";
                        th.InStationTime = DateTime.Now;
                        th.OutStationTime = DateTime.Now;
                        th.CreatedDate = DateTime.Now;
                        th.UpdatedBy = this.UserCode;
                        DBContext.SaveAndUpdate<TrackingHistory>(th);
                        return PSN;
                    }
                    else
                    {
                        throw new Exception("该来料条码未出库");
                    }
                }
                else
                {
                    throw new Exception("来料条码不存在");
                }
            }
            catch(Exception ex)
            {
                return ex.ToString();
            }
        }

        public IList<TrackingWip> FindPSNPrint(string PSN)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(PSN))
            {
                ce = (TrackingWip.Meta.PSN == PSN);
            }

            if (ce == null)
            {
                return DBContext.FindArray<TrackingWip>(TrackingWip.Meta.StationName=="PRINT");
            }
            return DBContext.FindArray<TrackingWip>(ce);
        }

        public IList<WorkOrder> FindLatheTask(string worker)
        {
            ConditionExpress ce = (WorkOrder.Meta.STATUS == "1");

            if (!string.IsNullOrEmpty(worker))
            {
                ce = (ce & WorkOrder.Meta.WORKER == worker);
            }
            else
            {
                ce = (ce & WorkOrder.Meta.WORKER.Like(this.UserCode));
            }

            return DBContext.FindArray<WorkOrder>(ce);
        }
        public IList<TrackingHistory> FindLatheTaskHistory(string worker)
        {
            ConditionExpress ce = null;

            if (!string.IsNullOrEmpty(worker))
            {
                ce = (ce & TrackingHistory.Meta.UpdatedBy == worker);
            }
            else
            {
                ce = (ce & TrackingHistory.Meta.UpdatedBy == this.UserCode);
            }
            DateTime dtstart = DateTime.Now.Date;
            DateTime dtend = DateTime.Now;
             
            ce = (ce & TrackingHistory.Meta.CreatedDate >= dtstart);
            ce = (ce & TrackingHistory.Meta.CreatedDate <= dtend);
            
            return DBContext.FindArray<TrackingHistory>(ce,TrackingHistory.Meta.CreatedDate.DESC);
        }

        public TrackingTemp FindTrackingTemp(string ID)
        {
            ConditionExpress ce = null;

            if (!string.IsNullOrEmpty(ID))
            {
                ce = (ce & TrackingTemp.Meta.ID == ID);
            }
            else
            {
                return null;
            }
            
            return DBContext.Find<TrackingTemp>(ce);
        }

        public string SaveTrackingTemp(TrackingTemp tt)
        {
            try
            {
                if (string.IsNullOrEmpty(tt.ID))
                {
                    tt.CreatedDate = DateTime.Now;
                    tt.UpdatedBy = this.UserCode;
                    tt.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    DBContext.SaveAndUpdate<TrackingTemp>(tt);
                }
                else
                {
                    tt.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<TrackingTemp>(tt);
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveTrackingTemp");
                throw ex;
            }
            return tt.ID;
        }

        public void RemoveTrackingTemp(string ID)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                DBContext.Remove<TrackingTemp>(trans, TrackingTemp.Meta.ID == ID);
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveTrackingTempe");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }

        public IList<TrackingHistory> FindSNTrackingInfo(string SN)
        {
            ConditionExpress ce = null;

            if (!string.IsNullOrEmpty(SN))
            {
                ce = (ce & (TrackingHistory.Meta.PSN == SN | TrackingHistory.Meta.MSN==SN));
            }
            else
            {
                return null;
            }

            return DBContext.FindArray<TrackingHistory>(ce);
        }

        public void SaveTrackingHistory(TrackingHistory obj)
        {
            try
            {
                if (string.IsNullOrEmpty(obj.ID))
                {
                    obj.CreatedDate = DateTime.Now;
                    obj.UpdatedBy = this.UserCode;
                    obj.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    DBContext.SaveAndUpdate<TrackingHistory>(obj);
                }
                else
                {
                    obj.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<TrackingHistory>(obj);
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveTrackingHistory");
                throw ex;
            }
            
        }
        public void SaveTrackingWip(TrackingWip obj)
        {
            try
            {
                obj.UpdatedBy = this.UserCode;
                obj.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<TrackingWip>(obj);               
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveTrackingWip");
                throw ex;
            }

        }
        public IList<TrackingWip> FindTrackingWip(string SN)
        {
            ConditionExpress ce = null;

            if (!string.IsNullOrEmpty(SN))
            {
                ce = (ce & TrackingWip.Meta.PSN == SN);
            }
            //else
            //{
            //    DateTime dtstart = DateTime.Now.AddDays(-7).Date;
            //    DateTime dtend = DateTime.Now;

            //    ce = (ce & TrackingWip.Meta.CreatedDate >= dtstart);
            //    ce = (ce & TrackingWip.Meta.CreatedDate <= dtend);
            //    return DBContext.FindArray<TrackingWip>(ce);
            //}

            IList<TrackingWip> itws = DBContext.FindArray<TrackingWip>(ce);
            if(itws.Count<1)
            {
                return DBContext.FindArray<TrackingWip>(TrackingWip.Meta.MSN == SN);
            }
            return itws;
        }

        public IList<WorkOrder> FindQCTask()
        {
            ConditionExpress ce = (WorkOrder.Meta.STATUS == "1");
            return DBContext.FindArray<WorkOrder>(ce);
        }

        public IList<TrackingHistory> FindQCCheckHistory()
        {
            ConditionExpress ce = null;             
            ce = (ce & TrackingHistory.Meta.UpdatedBy == this.UserCode);            
            DateTime dtstart = DateTime.Now.Date;
            DateTime dtend = DateTime.Now;
            ce = (ce & TrackingHistory.Meta.CreatedDate >= dtstart);
            ce = (ce & TrackingHistory.Meta.CreatedDate <= dtend);
            return DBContext.FindArray<TrackingHistory>(ce, TrackingHistory.Meta.CreatedDate.DESC);
        }

        public IList<FailItems> FindFailItems(string failcode,string failtype,string failname)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(failcode))
            {
                ce = (ce & FailItems.Meta.FailCode == failcode);
            }
            if (!string.IsNullOrEmpty(failtype))
            {
                ce = (ce & FailItems.Meta.FailType == failtype);
            }
            if (!string.IsNullOrEmpty(failname))
            {
                ce = (ce & FailItems.Meta.FailMemo == failname);
            }
           
            if(ce==null)
            {
                return DBContext.LoadArray<FailItems>();
            }
            return DBContext.FindArray<FailItems>(ce);
        }

        public void SaveUnsurenessProduct(UnsurenessProduct obj)
        {
            try
            {
                obj.UpdatedBy = this.UserCode;
                obj.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<UnsurenessProduct>(obj);

                UnsurenessHistory up = new UnsurenessHistory();
                up.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                up.PSN = obj.PSN;
                up.MSN = obj.MSN;
                up.WorkOrder = obj.WorkOrder;
                up.FailCode = obj.FailCode;
                up.FailMemo = obj.FailMemo;
                up.STATUS = obj.STATUS;
                up.MEMO = obj.MEMO;
                up.StationName =obj.StationName;
                up.QUANTITY = obj.QUANTITY;
                up.PartsdrawingCode = obj.PartsdrawingCode;
                up.ProductName = obj.ProductName;
                up.BatchNumber = obj.BatchNumber;
                up.CreatedDate = DateTime.Now;
                SaveUnsurenessHistory(up);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveUnsurenessProduct");
                throw ex;
            }

        }

        public void SaveUnsurenessHistory(UnsurenessHistory obj)
        {
            try
            {
                obj.UpdatedBy = this.UserCode;
                obj.UpdatedDate = DateTime.Now;
                DBContext.SaveAndUpdate<UnsurenessHistory>(obj);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveUnsurenessHistory");
                throw ex;
            }

        }
        public void SaveUnsurenessProduct(string psn,string failcode,string failmemo)
        {
            try
            {
                IList<TrackingWip> tw = FindTrackingWip(psn);
                if (tw.Count > 0)
                {
                    UnsurenessProduct uproduct = new UnsurenessProduct();
                    uproduct.PSN = psn;
                    uproduct.MSN = tw[0].MSN;
                    uproduct.WorkOrder = tw[0].WorkOrder;
                    uproduct.FailCode = failcode;
                    uproduct.FailMemo = failmemo;
                    uproduct.STATUS = "0";
                    uproduct.MEMO = "待处理";
                    uproduct.StationName = tw[0].StationName;
                    uproduct.QUANTITY = tw[0].QUANTITY;
                    uproduct.PartsdrawingCode = tw[0].PartsdrawingCode;
                    uproduct.ProductName = tw[0].PartsName;
                    uproduct.BatchNumber = tw[0].BatchNumber;
                    uproduct.UpdatedBy = this.UserCode;
                    uproduct.CreatedDate = DateTime.Now;
                    uproduct.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<UnsurenessProduct>(uproduct);

                    UnsurenessHistory up = new UnsurenessHistory();
                    up.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    up.PSN = uproduct.PSN;
                    up.MSN = uproduct.MSN;
                    up.WorkOrder = uproduct.WorkOrder;
                    up.FailCode = uproduct.FailCode;
                    up.FailMemo = uproduct.FailMemo;
                    up.STATUS = uproduct.STATUS;
                    up.MEMO = uproduct.MEMO;
                    up.StationName = uproduct.StationName;
                    up.QUANTITY = uproduct.QUANTITY;
                    up.PartsdrawingCode = uproduct.PartsdrawingCode;
                    up.ProductName = uproduct.ProductName;
                    up.BatchNumber = uproduct.BatchNumber;
                    up.CreatedDate = DateTime.Now;
                    SaveUnsurenessHistory(up);
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveUnsurenessProduct");
                throw ex;
            }

        }

        public IList<UnsurenessProduct> FindUnsurenessProduct(string psn)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(psn))
            {
                ce = (ce & UnsurenessProduct.Meta.PSN == psn);
            }
            //if (!string.IsNullOrEmpty(failtype))
            //{
            //    ce = (ce & FailItems.Meta.FailType == failtype);
            //}
            //if (!string.IsNullOrEmpty(failname))
            //{
            //    ce = (ce & FailItems.Meta.FailMemo == failname);
            //}

            if (ce == null)
            {
                return DBContext.LoadArray<UnsurenessProduct>();
            }
            return DBContext.FindArray<UnsurenessProduct>(ce);
        }

        public IList<UnsurenessProduct> FindUnsurenessProductOut(string psn)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(psn))
            {
                ce = (ce & UnsurenessProduct.Meta.PSN == psn);
            }
             
            //if (!string.IsNullOrEmpty(failname))
            //{
            //    ce = (ce & FailItems.Meta.FailMemo == failname);
            //}

            if (ce == null)
            {
                //状态（0：待处理；1：返工；2：让步接收；3：报废；4：已审核）
                return DBContext.FindArray<UnsurenessProduct>(UnsurenessProduct.Meta.STATUS=="0"| UnsurenessProduct.Meta.STATUS=="1"| UnsurenessProduct.Meta.STATUS=="2"| UnsurenessProduct.Meta.STATUS=="3");
            }
            return DBContext.FindArray<UnsurenessProduct>(ce);
        }
        public IList<UnsurenessProduct> FindCheckUnsurenessProduct(string psn)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(psn))
            {
                ce = (ce & UnsurenessProduct.Meta.PSN == psn);
            }
             
            if (ce == null)
            {
                //状态（0：待处理；1：返工；2：让步接收；3：报废；4：已审核）
                return DBContext.FindArray<UnsurenessProduct>(UnsurenessProduct.Meta.STATUS == "1" | UnsurenessProduct.Meta.STATUS == "2" | UnsurenessProduct.Meta.STATUS == "3");
            }
            return DBContext.FindArray<UnsurenessProduct>(ce);
        }

        public IList<PrintSet> FindPrintSet(string templatetype)
        {
            ConditionExpress ce = null;

            if (!string.IsNullOrEmpty(templatetype))
            {
                ce = (ce & PrintSet.Meta.TemplateType == templatetype);
            }
            
            if(ce==null)
            {
                return DBContext.LoadArray<PrintSet>();
            }
            IList<PrintSet> itws = DBContext.FindArray<PrintSet>(ce);             
            return itws;
        }

        public void SavePrintSet(string templatetype, string templatecode, string isactive)
        {
            try
            {
                if(isactive=="0")
                {
                    PrintSet obj = DBContext.Find<PrintSet>(PrintSet.Meta.ID == templatecode);
                    if(obj!=null)
                    {
                        obj.ACTIVE = isactive;
                        DBContext.SaveAndUpdate<PrintSet>(obj);
                    }
                    else
                    {
                        throw new Exception("无此模板");
                    }
                }
                else
                {
                     IList<PrintSet> objs = FindPrintSet(templatetype);
                    foreach(PrintSet o in objs)
                    {
                        if(o.ID==templatecode)
                        {
                            o.ACTIVE = "1";
                        }
                        else
                        {
                            o.ACTIVE = "0";
                        }
                        DBContext.SaveAndUpdate<PrintSet>(o);
                    }
                }               
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SavePrintSet");
                throw ex;
            }

        }

        public void RemovePrintSet(string templatecode)
        {
            try
            {
                PrintSet obj = DBContext.Find<PrintSet>(PrintSet.Meta.ID == templatecode);
                if (obj != null)
                {
                    if (obj.ACTIVE == "1")
                    {
                        throw new Exception("此模板当前为激活状态，禁止删除");
                    }
                    else
                    {
                        DBContext.Remove<PrintSet>(obj);
                    }

                }
                else
                {
                    throw new Exception("无此模板");
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemovePrintSet");
                throw ex;
            }

        }

        public void SavePrintLabelTemplate(PrintSet obj)
        {
            try
            {
                if(string.IsNullOrEmpty(obj.ID))
                {
                    obj.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    obj.CreatedDate = DateTime.Now;
                    obj.UpdatedBy = this.UserCode;

                }
                 
                DBContext.SaveAndUpdate<PrintSet>(obj);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SavePrintLabelTemplate");
                throw ex;
            }

        }

        public void SaveCartonTemp(CartonTemp obj)
        {
            try
            {
                obj.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                DBContext.SaveAndUpdate<CartonTemp>(obj);               
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveCartonTemp");
                throw ex;
            }
        }

        public void RemoveCartonTemp(string ip)
        {
            try
            {
                DBContext.Remove<CartonTemp>(CartonTemp.Meta.IP == ip);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveCartonTemp");
                throw ex;
            }
        }

        public IList<CartonTemp> FindCartonTemp(string ip)
        {
            try
            {
               return DBContext.FindArray<CartonTemp>(CartonTemp.Meta.IP == ip);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "FindCartonTemp");
                throw ex;
            }
        }

        public void SaveCartonInfo(string ip,string carton)
        {
            try
            {
                IList<CartonTemp> objs = FindCartonTemp(ip);
                if(objs.Count>0)
                {
                    //保存箱号
                    foreach(CartonTemp ct in objs)
                    {
                        CartonInfo ci = new CartonInfo();
                        ci.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                        ci.PartsdrawingCode = ct.PartsdrawingCode;
                        ci.QualityCode = ct.QualityCode;
                        ci.QUANTITY = ct.QUANTITY;
                        ci.CSN = carton;
                        IList<WorkOrder> wo = FindWorkOrderByPartsdrawingCode(ct.PartsdrawingCode);
                        if(wo.Count>0)
                        {
                            ci.OrderNumber = wo[0].OrderNumber;
                        }
                        ci.CreatedDate = DateTime.Now;
                        ci.UpdatedBy = this.UserCode;
                        DBContext.SaveAndUpdate<CartonInfo>(ci);
                    }
                   
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveCartonInfo");
                throw ex;
            }
        }

        public IList<CartonInfo> FindCartonInfo(string csn,string orderno,string user,DateTime start,DateTime end)
        {
            try
            {
                ConditionExpress ce = null;
                if (!string.IsNullOrEmpty(csn))
                {
                    ce = (ce & CartonInfo.Meta.CSN == csn);
                }
                if (!string.IsNullOrEmpty(orderno))
                {
                    ce = (ce & CartonInfo.Meta.OrderNumber == orderno);
                }

                if (!string.IsNullOrEmpty(user))
                {
                    ce = (ce & FailItems.Meta.UpdatedBy == user);
                }
                if(start!=null&&end!=null)
                {
                    ce = (ce & CartonInfo.Meta.CreatedDate >= start);
                    ce = (ce & CartonInfo.Meta.CreatedDate <= end);
                }
                if(ce==null)
                {
                    return DBContext.LoadArray<CartonInfo>();
                }
                return DBContext.FindArray<CartonInfo>(ce, CartonInfo.Meta.CreatedDate.DESC);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "FindCartonInfo");
                throw ex;
            }
        }
        /// <summary>
        /// yajiao
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        public TextValueInfo[] ListBaseByCode(string code)
        {
            IList<BasBase> bases = DBContext.FindArray<BasBase>(BasBase.Meta.CODE == code);

            TextValueInfo[] vts = new TextValueInfo[bases.Count];
            if (bases != null && bases.Count > 0)
            {
                for (var i = 0; i < bases.Count; i++)
                {
                    vts[i] = new TextValueInfo();
                    vts[i].Value = bases[i].SubCode;
                    vts[i].Text = bases[i].SubName;
                }
            }

            return vts;
        }
        public IList<MaterialStock> FindStockInfo(string status, string materialname, string custname, string starttime, string endtime, string batchnumber)
        {
            ConditionExpress ce = null;
           
            if (!string.IsNullOrEmpty(status))
            {
                if (status.IndexOf('^') != -1)
                {
                    string[] strtemp = status.Split('^');
                    ce = (ce & (MaterialStock.Meta.STATUS == strtemp[0] | MaterialStock.Meta.STATUS == strtemp[1]));
                }
                ce = (ce & MaterialStock.Meta.STATUS == status);
            }
          
            if (!string.IsNullOrEmpty(materialname))
            {
                ce = (ce & MaterialStock.Meta.MaterialName == materialname);
            }
            if (!string.IsNullOrEmpty(custname))
            {
                ce = (ce & MaterialStock.Meta.CustName == custname);
            }
            if (!string.IsNullOrEmpty(batchnumber))
            {
                ce = (ce & MaterialStock.Meta.BatchNumber == batchnumber);
            }
            if (!string.IsNullOrEmpty(starttime) && !string.IsNullOrEmpty(endtime))
            {
                ce = (ce & MaterialStock.Meta.CreatedDate >= Convert.ToDateTime(starttime));
                ce = (ce & MaterialStock.Meta.CreatedDate <= Convert.ToDateTime(endtime));
            }
            else
            {
                ce = (ce & MaterialStock.Meta.CreatedDate >= DateTime.Now.AddDays(-7));
                ce = (ce & MaterialStock.Meta.CreatedDate <= DateTime.Now);
            }

            return DBContext.FindArray<MaterialStock>(ce);
        }

        public void SaveFailItems(FailItems objs)
        {
            try
            {                
                if (!DBContext.Exist<FailItems>(FailItems.Meta.FailCode == objs.FailCode))
                {
                    objs.CreatedDate = DateTime.Now;
                    
                }
                else
                {
                    objs.UpdatedDate = DateTime.Now;
                }
                objs.UpdatedBy = this.UserCode;
                DBContext.SaveAndUpdate<FailItems>(objs);
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveFailItems");
                throw ex;
            }
        }
        public void RemoveFailItems(string failcode)
        {
            IDbTransaction trans = DBContext.OpenTrans();
            try
            {
                FailItems od = DBContext.Find<FailItems>(FailItems.Meta.FailCode == failcode);
                if (od != null)
                {
                    DBContext.Remove<FailItems>(trans, FailItems.Meta.FailCode == failcode);
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "RemoveFailItems");
                throw ex;
            }
            finally
            {
                DBContext.ReleaseTrans(trans);
            }
        }
        public IList<FailItems> FindFailItems(string failcode, string failtype)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(failcode))
            {
                ce = (FailItems.Meta.FailCode == failcode);
            }

            if (!string.IsNullOrEmpty(failtype))
            {
                ce = (ce & FailItems.Meta.MEMO1==failtype);
            }
            if (ce == null)
            {
                return DBContext.LoadArray<FailItems>();
            }

            return DBContext.FindArray<FailItems>(ce);

        }

        public void SaveCheckUnsureness(string psn,string result)
        {
            try
            {
                UnsurenessProduct up = DBContext.Find<UnsurenessProduct>(UnsurenessProduct.Meta.PSN == psn);
                if(up!=null)
                {
                    if(result=="1")
                    {
                        up.STATUS = "4";
                        up.MEMO = "已审核";
                        up.UpdatedBy = this.UserCode;
                        up.UpdatedDate = DateTime.Now;
                        DBContext.SaveAndUpdate<UnsurenessProduct>(up);

                        UnsurenessHistory uh = new UnsurenessHistory();
                        uh.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                        uh.PSN = up.PSN;
                        uh.MSN = up.MSN;
                        uh.MEMO = up.MEMO;
                        uh.PartsdrawingCode = up.PartsdrawingCode;
                        uh.ProductName = up.ProductName;
                        uh.QUANTITY = up.QUANTITY;
                        uh.StationName = up.StationName;
                        uh.STATUS = up.STATUS;
                        uh.WorkOrder = up.WorkOrder;
                        uh.UpdatedBy = up.UpdatedBy;
                        uh.CreatedDate = DateTime.Now;
                        uh.BatchNumber = up.BatchNumber;
                        uh.FailCode = up.FailCode;
                        uh.FailMemo = up.FailMemo;
                        DBContext.SaveAndUpdate<UnsurenessHistory>(uh);
                    }
                }
                 
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveCheckUnsureness");
                throw ex;
            }
        }
        public void SaveRealtimeStatistics(RealtimeStatistics obj)
        {
            try
            {
                if (DBContext.Exist<RealtimeStatistics>(RealtimeStatistics.Meta.PSN==obj.PSN&RealtimeStatistics.Meta.StationName==obj.StationName))
                {
                    obj.UpdatedDate = DateTime.Now;
                    DBContext.SaveAndUpdate<RealtimeStatistics>(obj);
                    
                }
                else
                {
                    obj.CreatedDate = DateTime.Now;
                    obj.UpdatedBy = this.UserCode;
                    obj.ID = PubHelper.GetHelper().GetNextID("MES_MASTER.SEQ_ALL_ID").ToString();
                    DBContext.SaveAndUpdate<RealtimeStatistics>(obj);
                }
            }
            catch (Exception ex)
            {
                PubHelper.GetHelper(DBContext).Error(ex, this.UserCode, "SaveRealtimeStatistics");
                throw ex;
            }

        }

        public int FindFailCountbyWorkOrder(string workorder,string partsdrawing)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(workorder))
            {
                ce = (UnsurenessProduct.Meta.WorkOrder == workorder);
            }

            if (!string.IsNullOrEmpty(partsdrawing))
            {
                ce = (UnsurenessProduct.Meta.PartsdrawingCode == partsdrawing);
            }

            if (ce == null)
            {
                return DBContext.LoadArray<UnsurenessProduct>().Count;
            }
            return DBContext.FindArray<UnsurenessProduct>(ce).Count;
        }

        public IList<UnsurenessHistory> FindUnsurenessHistory(UnsurenessHistory uh)
        {
            ConditionExpress ce = null;
            if (!string.IsNullOrEmpty(uh.PSN))
            {
                ce = (ce & UnsurenessHistory.Meta.PSN == uh.PSN);
            }
            if (!string.IsNullOrEmpty(uh.WorkOrder))
            {
                ce = (UnsurenessHistory.Meta.WorkOrder == uh.WorkOrder);
            }
            if (!string.IsNullOrEmpty(uh.PartsdrawingCode))
            {
                ce = (ce & UnsurenessHistory.Meta.PartsdrawingCode == uh.PartsdrawingCode);
            }
            if (!string.IsNullOrEmpty(uh.STATUS))
            {
                ce = (ce & UnsurenessHistory.Meta.STATUS == uh.STATUS);
            }
            if (null!=uh.CreatedDate&&null!=uh.UpdatedDate)
            {
                ce = (ce & UnsurenessHistory.Meta.CreatedDate >= uh.CreatedDate);
                ce = (ce & UnsurenessHistory.Meta.CreatedDate <= uh.UpdatedDate);
            }
            
            if (ce == null)
            {
                return DBContext.LoadArray<UnsurenessHistory>();
            }
            return DBContext.FindArray<UnsurenessHistory>(ce);
        }

        public int[] FindYieldCountInfo(string workorder, string partsdrawing)
        {
            ConditionExpress ce = null;
            IList<UnsurenessProduct> uplist = null;
            int[] res = new int[4];//0:不良数量；1：返工数量；2：让步数量：3：废品数量
            if (!string.IsNullOrEmpty(workorder))
            {
                ce = (UnsurenessProduct.Meta.WorkOrder == workorder);
            }

            if (!string.IsNullOrEmpty(partsdrawing))
            {
                ce = (UnsurenessProduct.Meta.PartsdrawingCode == partsdrawing);
            }

            if (ce == null)
            {
                uplist = DBContext.LoadArray<UnsurenessProduct>();
            }
            else
            {
                uplist = DBContext.FindArray<UnsurenessProduct>(ce);
            }
            res[0] = uplist.Count;
            IList<UnsurenessHistory> uhlist = DBContext.FindArray<UnsurenessHistory>(UnsurenessHistory.Meta.WorkOrder == workorder & UnsurenessHistory.Meta.STATUS == "1");
            if(uhlist==null)
            {
                res[1] = 0;
            }
            else
            {
                res[1] = uhlist.Count;
            }

            uhlist = DBContext.FindArray<UnsurenessHistory>(UnsurenessHistory.Meta.WorkOrder == workorder & UnsurenessHistory.Meta.STATUS == "2");
            if (uhlist == null)
            {
                res[2] = 0;
            }
            else
            {
                res[2] = uhlist.Count;
            }
            uhlist = DBContext.FindArray<UnsurenessHistory>(UnsurenessHistory.Meta.WorkOrder == workorder & UnsurenessHistory.Meta.STATUS == "3");
            if (uhlist == null)
            {
                res[3] = 0;
            }
            else
            {
                res[3] = uhlist.Count;
            }

            return res;
        }
        public int FindCountFromRealtimeStatistics(RealtimeStatistics rs)
        {
            string sql = @"SELECT count(distinct(psn)) from MES_MASTER.realtime_statistics where 1=1  ";             
           
            if (!string.IsNullOrEmpty(rs.WorkOrder))
            {
                sql +=" and work_order= '"+ rs.WorkOrder+"'";
            }

            if (!string.IsNullOrEmpty(rs.PartsdrawingCode))
            {
                sql += " and partsdrawing_code= '" + rs.PartsdrawingCode + "'";
            }
            if (!string.IsNullOrEmpty(rs.STATUS))
            {
                sql += " and status= '" + rs.STATUS + "'";
            }
            if (!string.IsNullOrEmpty(rs.StationName))
            {
                sql += " and station_name= '" + rs.StationName + "'";
            }
            
            DataSet ds = DBContext.ExcuteSql(sql).ToDataSet();
            return Convert.ToInt32(ds.Tables[0].Rows[0][0].ToString());
        }

        /// <summary>
        /// yajiao
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        public string ListCustCodeByName(string name)
        {
            IList<BasCustom> bases = DBContext.FindArray<BasCustom>(BasBase.Meta.NAME == name);

             
            if (bases != null && bases.Count > 0)
            {
                return bases[0].CODE;
            }

            return "";
        }

    }

}
